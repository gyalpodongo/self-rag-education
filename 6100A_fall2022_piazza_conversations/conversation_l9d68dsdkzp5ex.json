[
    {
        "content": "<p>My code passed all the test-cases; however, it fails the test cases for the autograder because I have one digit less than what is supposed to be. I don&#39;t know where exactly I reduce the number of decimals. Could you please help me find that part? Also, would it possible to get partial credit for the rest of the code?</p>\n<p></p>\n<p>here is my code for that specific function:</p>\n<p>def load_data(csv, price):<br />\u00a0 \u00a0 &#34;&#34;&#34;<br />\u00a0 \u00a0 loads data from .csv file (Comma-Separated Value) in which format is<br />\u00a0 \u00a0 \u00a0 \u00a0 MM/DD/YYYY,&#34;1,224.32&#34;,&#34;2,412.65&#34;,... for a specific price column.<br />\u00a0 \u00a0 \u00a0 \u00a0 Take a look at how the data is formatted! For example if we ask for<br />\u00a0 \u00a0 \u00a0 \u00a0 the Opening price, we want to take all the prices at index 1</p>\n<p>\u00a0 \u00a0 Beware that the values seperated by the commas have quotes! Furthermore,<br />\u00a0 \u00a0 \u00a0 \u00a0 each dollar amount also has commas!</p>\n<p>\u00a0 \u00a0 To open the file we need to use the open() method that comes with Python.<br />\u00a0 \u00a0 \u00a0 \u00a0 Note that we can do this in the following way:</p>\n<p>\u00a0 \u00a0 \u00a0 \u00a0 with open(FILENAME, &#34;r&#34;) as f:<br />\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ...<br />\u00a0 \u00a0 \u00a0 \u00a0<br />\u00a0 \u00a0 \u00a0 \u00a0 Here we open the file, and create a File object called `f` that we can use<br />\u00a0 \u00a0 \u00a0 \u00a0 to read lines</p>\n<p>\u00a0 \u00a0 Think first about how we should use the .split() string method... should we<br />\u00a0 \u00a0 \u00a0 \u00a0 split by commas? And if so what would it do?</p>\n<p>\u00a0 \u00a0 What if we splitted by something else? How do we most easily access the values?</p>\n<p>\u00a0 \u00a0 Args:<br />\u00a0 \u00a0 \u00a0 \u00a0 csv \u00a0 \u00a0 &lt;str&gt; - Filename where our dataset is stored<br />\u00a0 \u00a0 \u00a0 \u00a0 price \u00a0 &lt;str&gt; - Which price index column to load from; options are:\u00a0<br />\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 &#34;Open&#34;, &#34;High&#34;, &#34;Low&#34;, &#34;Close&#34;</p>\n<p>\u00a0 \u00a0 Returns tuple of ([dates], [prices]), in which the indices of\u00a0<br />\u00a0 \u00a0 \u00a0 \u00a0 dates correspond to the indices of their closing price<br />\u00a0 \u00a0 &#34;&#34;&#34;<br />\u00a0 \u00a0 new_list = ([], [])<br />\u00a0 \u00a0 if price == &#34;Open&#34;:<br />\u00a0 \u00a0 \u00a0 \u00a0 price = 1<br />\u00a0 \u00a0 elif price == &#39;High&#39;:<br />\u00a0 \u00a0 \u00a0 \u00a0 price = 2<br />\u00a0 \u00a0 elif price == &#39;Low&#39;:<br />\u00a0 \u00a0 \u00a0 \u00a0 price = 3\u00a0<br />\u00a0 \u00a0 elif price == &#39;Close&#39;:<br />\u00a0 \u00a0 \u00a0 \u00a0 price = 4<br />\u00a0 \u00a0 with open (csv, &#34;r&#34;) as f:<br />\u00a0 \u00a0 \u00a0 \u00a0 #goes over each line in f except the first (because it just has the title).\u00a0<br />\u00a0 \u00a0 \u00a0 \u00a0 #selects the price needed, gets rid of the &#34; and , so that python can recognize the number.\u00a0<br />\u00a0 \u00a0 \u00a0 \u00a0 #adds the date and price to the list<br />\u00a0 \u00a0 \u00a0 \u00a0 for i in f:<br />\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if &#34;Date,Open,High,Low,Close&#34; not in i:<br />\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 i = i.split(&#39;,&#34;&#39;)<br />\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new_price = i[price][:-2]<br />\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new_price = new_price.replace(&#39;,&#39;, &#39;&#39;) \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0<br />\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new_list = (new_list[0] &#43; [date_from_string(i[0])], new_list[1] &#43; [float(new_price)])<br />\u00a0 \u00a0 return new_list</p>",
        "type": "question",
        "created": "2022-10-17T19:30:16.141Z",
        "subject": "Low score from autograder",
        "_id": "l9d68dsdkzp5ex"
    },
    {
        "content": "<p><strong attention=\"j7awud7zf0p2uu\">@Kuan Wei Huang</strong>\u00a0</p>",
        "type": "followup",
        "created": "2022-10-18T02:12:35.863Z",
        "_id": "l9d68dsdkzp5ex"
    }
]