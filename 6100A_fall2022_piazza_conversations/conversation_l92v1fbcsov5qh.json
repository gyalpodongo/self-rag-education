[
    {
        "content": "I think I mostly understand this step, but I&#39;m not sure where the split function comes in, as I don&#39;t really have a string I want to be a list (at least I don&#39;t think I do...)",
        "type": "question",
        "created": "2022-10-10T14:19:13.992Z",
        "subject": "pset 4: data from csv file step",
        "_id": "l92v1fbcsov5qh"
    },
    {
        "content": "<p><strong>.split()</strong> comes in when you have a string that you want to divide into a list of things that were divided by a\u00a0<strong>separator</strong>.</p>\n<p></p>\n<p>For example in most CSV files, you may have the following code to open the file:</p>\n<p></p>\n<pre>\nwith open(&#34;my_data.csv&#34;, &#34;r&#34;) as f:\n\tfor line in f:\n\t\t# iterate over all the lines divided by the newline &#39;\\n&#39; character\n\t\tprint(line)</pre>\n<p></p>\n<p>And when printing the line it could look something like this:</p>\n<p></p>\n<pre>\n1,10,5,8,2,3</pre>\n<p>Since CSV files are Comma-Separated-Value files, typically the comma will be your separator, so for each line calling\u00a0<strong>line.split(&#39;,&#39;)</strong> will give you a list that looks like this:</p>\n<pre>\n[&#34;1&#34;, &#34;10&#34;, &#34;5&#34;, &#34;8&#34;, &#34;2&#34;, &#34;3&#34;]</pre>\n<p>Notice that the values are strings, so you&#39;ll have to figure out how to convert them into the form you want. Also many CSV files are not this nicely laid out, and you may have to do a bit of messing around with the data to get the\u00a0<strong>.split()</strong> function to work as you intend. For example, you can set your\u00a0<strong>separator</strong> (input to the split() function) to be a\u00a0<strong>string\u00a0</strong>instead of a single character.</p>",
        "type": "i_answer",
        "created": "2022-10-12T01:01:58.906Z",
        "_id": "l92v1fbcsov5qh"
    }
]